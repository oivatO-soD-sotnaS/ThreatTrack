generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model cpbr_vulnerability {
  sla_deadline        String?
  engagement          String?
  mitigation          String?
  cvssv3_score        String?
  is_mitigated        String?
  found_by            String?
  numerical_severity  String?
  cvssv3              String?
  product             String?
  sla_days_remaining  String?
  epss_score          String?
  severity            String?
  cwe                 String?
  hash_code           String?
  references          String?
  impact              String?
  id                  String?
  reporter_id         String?
  criticality         BigInt?
  component_name      String?
  title               String?
  product_id          String?
  description         String?
  file_path           String?
  sla_age             String?
  sla_expiration_date String?
  date                String?
  vulnerability_id    String  @id(map: "vulnerability_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model user {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  score         Float     @db.Real
  accounts      Account[]
  sessions      Session[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ict_vulnerability {
  id BigInt @id @default(autoincrement())
}

model in_development_item {
  id                Int               @id @default(autoincrement())
  vulnerabilityId   String            @unique @db.Uuid
  n8n_vulnerability n8n_vulnerability @relation(fields: [vulnerabilityId], references: [n8n_vulnerability_id])
}

model n8n_vulnerability {
  vulnerability_ids    String?
  sla_deadline         String?
  engagement           String?
  mitigation           String?
  created              DateTime?            @db.Timestamptz(6)
  found_by             String?
  numerical_severity   String?
  active               Boolean?
  product              String?
  sla_days_remaining   BigInt?
  dynamic_finding      Boolean?
  test                 String?
  severity             String?
  last_reviewed_by     String?
  cwe                  BigInt?
  hash_code            String?
  references           String?
  static_finding       Boolean?
  engagement_id        BigInt?
  id                   BigInt?
  reporter_id          BigInt?
  criticality          BigInt?
  component_name       String?
  title                String?
  description          String?
  component_version    String?
  file_path            String?
  sla_age              BigInt?
  n8n_vulnerability_id String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  score                Float?
  in_development_item  in_development_item?
  ready_item           ready_item?
  to_do_item           to_do_item?
}

model ready_item {
  id                Int               @id @default(autoincrement())
  vulnerabilityId   String            @unique @db.Uuid
  n8n_vulnerability n8n_vulnerability @relation(fields: [vulnerabilityId], references: [n8n_vulnerability_id])
}

model to_do_item {
  id                Int               @id @default(autoincrement())
  vulnerabilityId   String            @unique @db.Uuid
  n8n_vulnerability n8n_vulnerability @relation(fields: [vulnerabilityId], references: [n8n_vulnerability_id])
}
